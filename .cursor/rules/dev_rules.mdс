# Правила разработки WordPress темы с Carbon Fields

## Структура проекта
```
wp-content/themes/customtheme/
├── assets/          # Ресурсы темы
│   ├── css/        # Стили
│   ├── js/         # JavaScript файлы
│   ├── images/     # Изображения
│   └── icons/      # Иконки
├── inc/            # Вспомогательные функции
│   ├── theme-fields/    # Поля Carbon Fields
│   ├── pages-data/      # Данные страниц
│   ├── menus-info/      # Настройки меню
│   ├── custom_hooks/    # Пользовательские хуки
│   ├── enqueue.php      # Подключение стилей и скриптов
│   ├── common-carbonfields.php  # Общие настройки Carbon Fields
│   └── carbon-fields.php        # Инициализация Carbon Fields
├── libs/           # Библиотеки темы
│   └── carbon-fields/    # Carbon Fields
├── sources/        # Исходный HTML шаблон
├── template-parts/ # Части шаблонов
├── template-pages/ # Шаблоны страниц
├── functions.php   # Основные функции темы
├── header.php      # Шапка сайта
├── footer.php      # Подвал сайта
├── index.php       # Главный шаблон
└── style.css       # Основной файл стилей темы
```

### Описание основных директорий и файлов

#### assets/
Директория для хранения всех ресурсов темы:
- `css/` - стили темы
- `js/` - JavaScript файлы
- `images/` - изображения
- `icons/` - иконки

#### inc/
Вспомогательные функции и настройки:
- `theme-fields/` - настройки полей Carbon Fields
- `pages-data/` - данные и настройки страниц
- `menus-info/` - настройки навигации
- `custom_hooks/` - пользовательские хуки WordPress
- `enqueue.php` - подключение стилей и скриптов
- `common-carbonfields.php` - общие настройки Carbon Fields
- `carbon-fields.php` - инициализация Carbon Fields

#### libs/
Библиотеки темы:
- `carbon-fields/` - библиотека Carbon Fields

#### sources/
Исходный HTML шаблон для создания темы

#### template-parts/
Переиспользуемые части шаблонов

#### template-pages/
Шаблоны страниц WordPress

#### Основные файлы
- `functions.php` - основные функции темы
- `header.php` - шапка сайта
- `footer.php` - подвал сайта
- `index.php` - главный шаблон
- `style.css` - основной файл стилей темы

## Создание темы на основе HTML шаблона

### 1. Подготовка HTML шаблона
- HTML шаблон находится в папке `sources/`
- Необходимо разделить шаблон на отдельные компоненты:
  - header.php - шапка сайта
  - footer.php - подвал сайта
  - template-parts/ - переиспользуемые компоненты
  - template-pages/ - шаблоны страниц

### 2. Процесс интеграции HTML с WordPress
- Процесс интеграции должен выполняться в два этапа:
  1. Копирование HTML кода:
     - Скопировать необходимый фрагмент HTML кода из `sources/` в соответствующий PHP файл
     - Сохранить оригинальную структуру HTML разметки
     - Убедиться в корректности всех классов и атрибутов
  2. Интеграция PHP кода:
     - Добавить необходимые PHP теги и функции WordPress
     - Заменить статические данные на динамические через функции WordPress
     - Использовать функции безопасности (esc_html__, esc_attr, esc_url)
     - Добавить условные операторы для проверки наличия данных
- Запрещается:
  - Менять структуру HTML разметки без необходимости
  - Удалять классы и атрибуты из оригинального HTML
  - Добавлять PHP код до копирования HTML
  - Интегрировать PHP код без предварительного анализа структуры HTML

### 3. Интеграция с WordPress
- Заменить статические данные на динамические функции WordPress
- Использовать функции WordPress для вывода контента
- Интегрировать навигационные меню через wp_nav_menu()

### 4. Интеграция с Carbon Fields
- Создать необходимые кастомные поля для контента
- Настроить контейнеры и поля в соответствии с дизайном
- Использовать условную логику для отображения полей

### 5. Адаптация стилей и скриптов
- Перенести CSS в соответствующие файлы в папке css/
- Перенести JavaScript в файлы в папке js/
- Настроить правильное подключение через enqueue.php

## Правила разработки

### 1. Подключение Carbon Fields
- Carbon Fields должна быть подключена в functions.php через composer
- Все кастомные поля должны быть определены в отдельных файлах в папке inc/
- Использовать пространство имен Carbon_Fields для работы с полями

### 2. Подключение стилей и скриптов
- Все стили и скрипты должны подключаться через enqueue.php
- Использовать версионирование файлов для кэширования
- Подключать скрипты в футере (параметр true в wp_enqueue_script)
- Все файлы стилей и скриптов должны находиться в папке assets/
  - Стили в assets/css/
  - Скрипты в assets/js/
  - Изображения в assets/images/
  - Иконки в assets/icons/
- Запрещается подключать файлы из других директорий
- Внешние библиотеки подключать через CDN

### 3. Навигационные меню
- Регистрировать меню в inc/menus-info/menus.php
- Использовать register_nav_menus для регистрации областей меню
- Поддерживать локализацию через esc_html__
- Создавать отдельные меню для каждого навигационного блока, отмеченного тегом 'nav' или классом, содержащим 'nav'
- Каждое меню должно иметь уникальный идентификатор и понятное описание
- Структура меню должна соответствовать HTML разметке

### 4. Шаблоны
- Использовать template-parts/ для переиспользуемых частей шаблонов
- Создавать отдельные шаблоны страниц в template-pages/
- Следовать иерархии шаблонов WordPress

### 5. Оптимизация
- Использовать webp формат для изображений
- Настроить максимальный размер загружаемых файлов
- Оптимизировать время выполнения скриптов

### 6. Безопасность
- Проверять прямой доступ к файлам через ABSPATH
- Использовать esc_html__ для вывода текста
- Валидировать и санитизировать все пользовательские данные

### 7. Рекомендации по улучшению
- Внедрить систему кэширования
- Реализовать систему логирования ошибок

### 8. Проверка релевантности кода
- Перед добавлением кода из других проектов необходимо проверить его релевантность текущему проекту
- Удалять неиспользуемый код и комментарии
- Проверять все импорты и зависимости на необходимость
- Не копировать код из других проектов без адаптации под текущий проект
- Регулярно проводить аудит кода на наличие неиспользуемых функций и классов
- Документировать причины использования кода из других проектов

### 9. Общие поля сайта
- Все общие поля сайта должны быть определены в отдельном файле inc/theme-fields/Crb_All_Fields.php
- Структура общих полей должна включать:
  - Мета-информацию (title, description, keywords)
  - Контактную информацию (телефон, email, адрес)
  - Социальные сети (Instagram, Telegram, Viber)
  - Информацию о компании (название, логотип)
  - Общие настройки шапки сайта
- Все поля должны иметь префикс crf_ для избежания конфликтов
- Для каждого поля необходимо указать значение по умолчанию
- Группировать поля по логическим разделам с помощью вкладок

### 10. Мета-теги и SEO
- Использовать плагин "WordPress SEO by Yoast" для управления мета-тегами
- Не дублировать функционал Yoast SEO в кастомных полях
- Мета-теги должны настраиваться через интерфейс Yoast SEO
- Поддерживать автоматическое формирование мета-тегов
- Следовать рекомендациям Yoast SEO по оптимизации

### 11. Создание header.php и footer.php
- Файлы header.php и footer.php должны создаваться на основе HTML шаблона из директории sources/
- Структура header.php:
  - Должна содержать все необходимые мета-теги и подключение стилей
  - Использовать wp_head() для подключения скриптов и стилей WordPress
  - Выводить динамические данные через carbon_get_theme_option()
  - Поддерживать локализацию через esc_html__ и esc_attr()
  - Содержать навигационное меню через wp_nav_menu()
  - Включать все необходимые социальные сети и контактную информацию
  - Поддерживать мобильное меню

- Структура footer.php:
  - Должна содержать все блоки подвала из HTML шаблона
  - Выводить динамические данные через carbon_get_theme_option()
  - Включать копирайт с динамическим годом
  - Содержать все социальные сети и контактную информацию
  - Включать модальные окна для форм
  - Использовать wp_footer() для подключения скриптов WordPress
  - Поддерживать локализацию через esc_html__ и esc_attr()

- Общие требования:
  - Все статические данные должны быть заменены на динамические
  - Все URL должны быть обработаны через esc_url()
  - Все атрибуты должны быть обработаны через esc_attr()
  - Все текстовые данные должны быть обработаны через esc_html()
  - Все формы должны иметь правильную структуру и атрибуты
  - Все изображения должны иметь атрибуты alt
  - Все ссылки должны иметь атрибуты target и rel где необходимо

### 12. Доступность контента (Accessibility)
- Все элементы интерфейса должны соответствовать стандартам WCAG 2.1 уровня AA
- Обязательные требования:
  - Все изображения должны иметь атрибут alt с осмысленным описанием
  - Все интерактивные элементы должны иметь атрибуты aria-label или aria-labelledby
  - Все формы должны иметь правильно связанные label и input элементы
  - Все кнопки должны иметь текстовое содержимое или aria-label
  - Все цветовые контрасты должны соответствовать минимальному соотношению 4.5:1
  - Все навигационные элементы должны быть доступны с клавиатуры
  - Все динамические элементы должны иметь соответствующие ARIA-атрибуты
  - Все таблицы должны иметь заголовки и scope атрибуты
  - Все видео должны иметь субтитры или текстовую альтернативу
  - Все аудио должно иметь текстовую расшифровку

- Структура HTML:
  - Использовать семантические HTML5 теги (header, nav, main, article, section, footer)
  - Обеспечить правильную иерархию заголовков (h1-h6)
  - Использовать списки (ul, ol) для группировки связанных элементов
  - Добавлять skip-links для пропуска повторяющихся блоков

- JavaScript:
  - Обеспечить работу всех функций без JavaScript
  - Добавлять обработчики клавиатурных событий
  - Использовать ARIA-live регионы для динамического контента
  - Обеспечить фокус на модальных окнах и возврат фокуса после закрытия

- Формы:
  - Добавлять понятные сообщения об ошибках
  - Использовать aria-invalid для невалидных полей
  - Обеспечить доступность капчи и других защитных элементов
  - Добавлять подсказки для сложных полей

- Мультимедиа:
  - Предоставлять текстовые альтернативы для всех медиа-элементов
  - Обеспечить управление медиа-плеерами с клавиатуры
  - Добавлять возможность отключения автовоспроизведения

- Тестирование:
  - Проверять сайт с помощью скринридеров (NVDA, VoiceOver)
  - Тестировать навигацию с клавиатуры
  - Проверять контрастность цветов
  - Использовать инструменты автоматической проверки доступности

## Примеры кода

### Подключение Carbon Fields
```php
use Carbon_Fields\Container;
use Carbon_Fields\Field;

add_action('after_setup_theme', 'crb_load');
function crb_load() {
    require_once('libs/carbon-fields/vendor/autoload.php');
    \Carbon_Fields\Carbon_Fields::boot();
}
```

### Создание кастомных полей
```php
function create_custom_fields() {
    Container::make('post_meta', 'Custom Fields')
        ->where('post_type', '=', 'post')
        ->add_fields(array(
            Field::make('text', 'custom_field', 'Custom Field'),
        ));
}
add_action('carbon_fields_register_fields', 'create_custom_fields');
```

### Подключение стилей и скриптов
```php
function theme_scripts() {
    wp_enqueue_style('theme-style', get_template_directory_uri() . '/css/styles.css');
    wp_enqueue_script('theme-script', get_template_directory_uri() . '/js/script.js', array(), '1.0', true);
}
add_action('wp_enqueue_scripts', 'theme_scripts');
```
